# 模块基础练习题

# 1. 创建一个简单的数学模块
"""
创建一个名为math_utils.py的模块，包含以下功能：
- 计算两个数的最大公约数
- 计算两个数的最小公倍数
- 判断一个数是否为质数
- 生成指定范围内的质数列表
- 计算一个数的阶乘
"""

# 2. 创建一个配置模块
"""
创建一个名为config.py的模块，实现以下功能：
- 从环境变量加载配置
- 从JSON文件加载配置
- 从YAML文件加载配置
- 合并多个配置源
- 验证配置的有效性
"""

# 3. 创建一个日志模块
"""
创建一个名为logger.py的模块，实现以下功能：
- 配置日志级别
- 配置日志格式
- 配置日志输出位置
- 支持同时输出到控制台和文件
- 支持日志轮转
"""

# 4. 创建一个工具模块
"""
创建一个名为utils.py的模块，实现以下功能：
- 文件操作工具函数
- 字符串处理工具函数
- 日期时间处理工具函数
- 数据验证工具函数
- 加密解密工具函数
"""

# 5. 创建一个测试模块
"""
创建一个名为test_utils.py的模块，实现以下功能：
- 测试math_utils模块的功能
- 测试config模块的功能
- 测试logger模块的功能
- 测试utils模块的功能
- 生成测试报告
"""

# 6. 模块导入练习
"""
创建一个main.py文件，练习以下导入方式：
- 导入整个模块
- 导入特定函数
- 使用别名导入
- 使用相对导入
- 使用绝对导入
"""

# 7. 模块重载练习
"""
创建一个reload_demo.py文件，实现以下功能：
- 动态修改模块内容
- 使用importlib重载模块
- 观察重载效果
- 处理重载异常
- 记录重载历史
"""

# 8. 模块文档练习
"""
为所有模块添加以下文档：
- 模块级文档字符串
- 函数级文档字符串
- 类级文档字符串
- 参数说明
- 返回值说明
"""

# 9. 模块测试练习
"""
创建一个test_main.py文件，实现以下功能：
- 使用unittest框架
- 使用pytest框架
- 使用mock对象
- 测试异常情况
- 生成测试覆盖率报告
"""

# 10. 模块打包练习
"""
创建一个setup.py文件，实现以下功能：
- 定义包信息
- 指定依赖关系
- 包含数据文件
- 定义入口点
- 支持开发模式安装
"""

# 测试代码
if __name__ == "__main__":
    print("模块基础练习题")
    print("请完成上述练习，并确保代码符合Python最佳实践") 